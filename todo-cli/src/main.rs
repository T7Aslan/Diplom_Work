use chrono::Local;
use serde::{Deserialize, Serialize};
use std::fs::{File, OpenOptions};
use std::io::{self, Read, Write};
use std::path::Path;

#[derive(Debug, Deserialize, Serialize)]
struct Zadanie {
    id: usize,                    // —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    text: String,                 //—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    done: bool,                   //—Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    created_at: String,           // –¥–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
    completed_at: Option<String>, //–¥–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å)
}
// –ú–µ—Ç–æ–¥—ã –¥–ª—è —Å—Ç—Ä—É–∫—Ç–∫—Ä—ã Zadanie
impl Zadanie {
    fn new(id: usize, text: String) -> Self {
        Zadanie {
            id,
            text,
            done: false,
            created_at: Local::now().to_string(),
            completed_at: None,
        }
    }
    fn complete(&mut self) {
        self.done = true;
        self.completed_at = Some(Local::now().to_string());
    }
}
struct ToDolist {
    zadaniey: Vec<Zadanie>, // –•—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    next_id: usize,         // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö ID
}
impl ToDolist {
    fn new() -> Self {
        ToDolist {
            zadaniey: Vec::new(),
            next_id: 1,
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
    fn add(&mut self, text: String) {
        let zadanie = Zadanie::new(self.next_id, text);
        self.zadaniey.push(zadanie);
        self.next_id += 1;
        println!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (–ù–æ–º–µ—Ä –∑–∞–¥–∞—á–∏ = {})", self.next_id - 1)
    }
}
// –û–¢–û–ë–†–ê–ñ–ï–ù–ò–ï –ó–ê–î–ê–ß
impl ToDolist {
    fn list(&self) {
        if self.zadaniey.is_empty() {
            println!("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç");
            return;
        }
        println!("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á:");
        for zadanie in &self.zadaniey {
            let status = if zadanie.done { "‚úì" } else { " " };
            println!("{:3} [{}] {}", zadanie.id, status, zadanie.text);
        }
    }
}
// –î–û–ë–ê–í–õ–ï–ù–ò–ï –û–ü–ï–†–ê–¶–ò –° –ó–ê–î–ê–ß–ê–ú–ò
impl ToDolist {
    fn complete(&mut self, id: usize) -> Result<(), String> {
        match self.zadaniey.iter_mut().find(|t| t.id == id) {
            Some(zadanie) => {
                zadanie.complete();
                Ok(println!("üëç –ó–∞–¥–∞—á–∞ {} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", id))
            }
            None => Err(format!("‚ùå –ó–∞–¥–∞—á–∞ —Å –ù–æ–º–µ—Ä–æ–º {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)),
        }
    }

    // –£–î–ê–õ–ï–ù–ò–ï –ó–ê–î–ê–ß–ò
    fn remove(&mut self, id: usize) -> Result<(), String> {
        let index = self.zadaniey.iter().position(|t| t.id == id);
        match index {
            Some(i) => {
                self.zadaniey.remove(i);
                Ok(println!("üóëÔ∏è –ó–∞–¥–∞—á–∞ {} —É–¥–∞–ª–µ–Ω–∞", id))
            }
            None => Err(format!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)),
        }
    }
}
// –†–ï–ê–õ–ò–ó–£–ï–ú –°–û–•–†–ê–ù–ï–ù–ò–ï –ò –ó–ê–ì–†–£–ó–ö–£
// –°–û–•–†–ê–ù–ï–ù–ò–ï
fn save_to_file(zadaniey: &[Zadanie]) -> io::Result<()> {
    let json = serde_json::to_string(zadaniey)?;
    let mut file = OpenOptions::new()
        .write(true)
        .create(true)
        .truncate(true)
        .open("zadaniey.json")?;
    file.write_all(json.as_bytes())?;
    Ok(())
}
//–ó–ê–ì–†–£–ó–öA
fn load_from_file() -> io::Result<Vec<Zadanie>> {
    if !Path::new("zadaniey.json").exists() {
        return Ok(Vec::new());
    }
    let mut file = File::open("zadaniey.json")?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?;
    let zadaniey = serde_json::from_str(&contents)?;
    Ok(zadaniey)
}

// –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ –ü–†–û–ì–†–ê–ú–ú–´
fn main() {
    //–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
    let mut todo = match load_from_file() {
        Ok(zadaniey) => {
            let next_id = zadaniey.iter().map(|t| t.id).max().unwrap_or(0) + 1;
            ToDolist { zadaniey, next_id }
        }
        Err(e) => {
            eprintln!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {}. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω.", e);
            ToDolist::new()
        }
    };
    //–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
    loop {
        println!("\nüìå –ö–æ–º–∞–Ω–¥—ã: –¥–æ–±–∞–≤–∏—Ç—å, —Å–ø–∏—Å–æ–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –≤—ã—Ö–æ–¥");
        print!("‚û•");
        io::Write::flush(&mut io::stdout()).unwrap();

        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let parts: Vec<&str> = input.trim().splitn(2, ' ').collect();

        match parts[0] {
            "–¥–æ–±–∞–≤–∏—Ç—å" if parts.len() > 1 => {
                todo.add(parts[1].to_string());
                save_to_file(&todo.zadaniey).unwrap();
            }
            "—Å–ø–∏—Å–æ–∫" => todo.list(),
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å" if parts.len() > 1 => {
                if let Ok(id) = parts[1].parse::<usize>() {
                    if let Err(e) = todo.complete(id) {
                        eprintln!("{}", e);
                    } else {
                        save_to_file(&todo.zadaniey).unwrap();
                    }
                } else {
                    eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏");
                }
            }
            "—É–¥–∞–ª–∏—Ç—å" if parts.len() > 1 => {
                if let Ok(id) = parts[1].parse::<usize>() {
                    if let Err(e) = todo.remove(id) {
                        eprintln!("{}", e);
                    } else {
                        save_to_file(&todo.zadaniey).unwrap();
                    }
                } else {
                    eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏");
                }
            }
            "–≤—ã—Ö–æ–¥" => break,
            _ => println!("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."),
        }
    }
}
