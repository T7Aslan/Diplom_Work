use chrono::{Local, NaiveDate}; // –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏/–≤—Ä–µ–º–µ–Ω–µ–º
use serde::{Deserialize, Serialize}; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è/–¥–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è
use std::fs::{File, OpenOptions}; // –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏
use std::io::{self, Read, Write}; // –í–≤–æ–¥/–≤—ã–≤–æ–¥
use std::path::Path; // –†–∞–±–æ—Ç–∞ —Å –ø—É—Ç—è–º–∏

/// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–¥–∞—á–∏ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–µ–π
#[derive(Debug, Deserialize, Serialize)]
struct Zadanie {
    id: usize,                    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–π —á–∏—Å–ª–æ–≤–æ–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    text: String,                 // –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
    done: bool,                   // –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (true/false)
    created_at: String,           // –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    completed_at: Option<String>, // –î–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (None –µ—Å–ª–∏ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞)
    due_date: Option<String>,     // –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
}

impl Zadanie {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    fn new(id: usize, text: String) -> Self {
        Zadanie {
            id,
            text,
            done: false,                          // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞
            created_at: Local::now().to_string(), // –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞/–≤—Ä–µ–º—è
            completed_at: None,                   // –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
            due_date: None,                       // –°—Ä–æ–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        }
    }

    /// –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å –≤–æ–∑–º–æ–∂–Ω—ã–º —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    fn with_due_date(id: usize, text: String, due_date: Option<String>) -> Self {
        Zadanie {
            id,
            text,
            done: false,
            created_at: Local::now().to_string(),
            completed_at: None,
            due_date, // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å—Ä–æ–∫
        }
    }

    /// –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
    fn complete(&mut self) {
        self.done = true;
        self.completed_at = Some(Local::now().to_string()); // –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    }
}

/// –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–¥–∞—á–∞–º–∏
struct ToDolist {
    zadaniey: Vec<Zadanie>, // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –º–∞—Å—Å–∏–≤ –∑–∞–¥–∞—á
    next_id: usize,         // –°—á—ë—Ç—á–∏–∫ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –Ω–æ–≤—ã—Ö ID
}

impl ToDolist {
    /// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
    fn new() -> Self {
        ToDolist {
            zadaniey: Vec::new(), // –ü—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä
            next_id: 1,           // –ù–∞—á–∏–Ω–∞–µ–º —Å ID = 1
        }
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –±–µ–∑ —Å—Ä–æ–∫–∞
    fn add(&mut self, text: String) {
        let zadanie = Zadanie::new(self.next_id, text);
        self.zadaniey.push(zadanie);
        self.next_id += 1; // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á—ë—Ç—á–∏–∫
        println!("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {})", self.next_id - 1);
    }

    /// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ä–æ–∫–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    fn add_with_date(&mut self, text: String, date_str: &str) -> Result<(), String> {
        // –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î
        match NaiveDate::parse_from_str(date_str, "%Y-%m-%d") {
            Ok(_) => {
                // –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤–∞–ª–∏–¥–Ω–∞
                let zadanie =
                    Zadanie::with_due_date(self.next_id, text, Some(date_str.to_string()));
                self.zadaniey.push(zadanie);
                self.next_id += 1;
                println!("‚úÖ –ó–∞–¥–∞—á–∞ —Å —Å—Ä–æ–∫–æ–º –¥–æ–±–∞–≤–ª–µ–Ω–∞ (ID: {})", self.next_id - 1);
                Ok(())
            }
            Err(_) => Err("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î".to_string()),
        }
    }

    /// –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    fn list(&self) {
        if self.zadaniey.is_empty() {
            println!("üì≠ –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –ø—É—Å—Ç");
            return;
        }

        // –†–∞—Å—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        let total = self.zadaniey.len();
        let done = self.zadaniey.iter().filter(|t| t.done).count();
        let progress = (done as f32 / total as f32) * 100.0;

        // –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞
        println!("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á (–≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {:.1}%):", progress);
        for zadanie in &self.zadaniey {
            let status = if zadanie.done { "‚úì" } else { " " }; // –ì–∞–ª–æ—á–∫–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
            let due_info = match &zadanie.due_date {
                Some(date) => format!(" [—Å—Ä–æ–∫: {}]", date), // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
                None => String::new(),
            };
            println!(
                "{:3} [{}] {}{}", // –§–æ—Ä–º–∞—Ç: "ID [‚úì] –¢–µ–∫—Å—Ç [—Å—Ä–æ–∫: ...]"
                zadanie.id, status, zadanie.text, due_info
            );
        }
    }

    /// –û—Ç–º–µ—Ç–∫–∞ –∑–∞–¥–∞—á–∏ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –ø–æ ID
    fn complete(&mut self, id: usize) -> Result<(), String> {
        match self.zadaniey.iter_mut().find(|t| t.id == id) {
            Some(zadanie) => {
                zadanie.complete();
                Ok(println!("üëç –ó–∞–¥–∞—á–∞ {} –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", id))
            }
            None => Err(format!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)),
        }
    }

    /// –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
    fn remove(&mut self, id: usize) -> Result<(), String> {
        let index = self.zadaniey.iter().position(|t| t.id == id);
        match index {
            Some(i) => {
                self.zadaniey.remove(i);
                Ok(println!("üóëÔ∏è –ó–∞–¥–∞—á–∞ {} —É–¥–∞–ª–µ–Ω–∞", id))
            }
            None => Err(format!("‚ùå –ó–∞–¥–∞—á–∞ —Å ID {} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", id)),
        }
    }
}

/// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á –≤ JSON —Ñ–∞–π–ª
fn save_to_file(zadaniey: &[Zadanie]) -> io::Result<()> {
    let json = serde_json::to_string(zadaniey)?; // –°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON
    let mut file = OpenOptions::new()
        .write(true)
        .create(true) // –°–æ–∑–¥–∞—Ç—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        .truncate(true) // –û—á–∏—Å—Ç–∏—Ç—å –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        .open("zadaniey.json")?; // –û—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª
    file.write_all(json.as_bytes())?; // –ó–∞–ø–∏—Å–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    Ok(())
}

/// –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á –∏–∑ JSON —Ñ–∞–π–ª–∞
fn load_from_file() -> io::Result<Vec<Zadanie>> {
    if !Path::new("zadaniey.json").exists() {
        return Ok(Vec::new()); // –í–µ—Ä–Ω—É—Ç—å –ø—É—Å—Ç–æ–π –≤–µ–∫—Ç–æ—Ä –µ—Å–ª–∏ —Ñ–∞–π–ª–∞ –Ω–µ—Ç
    }

    let mut file = File::open("zadaniey.json")?;
    let mut contents = String::new();
    file.read_to_string(&mut contents)?; // –ß—Ç–µ–Ω–∏–µ –≤—Å–µ–≥–æ —Ñ–∞–π–ª–∞
    let zadaniey = serde_json::from_str(&contents)?; // –ü–∞—Ä—Å–∏–Ω–≥ JSON
    Ok(zadaniey)
}

fn main() {
    // –ó–∞–≥—Ä—É–∑–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–¥–∞—á –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞
    let mut todo = match load_from_file() {
        Ok(zadaniey) => {
            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_id –∫–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π ID + 1
            let next_id = zadaniey.iter().map(|t| t.id).max().unwrap_or(0) + 1;
            ToDolist { zadaniey, next_id }
        }
        Err(e) => {
            eprintln!("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {}. –ù–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω.", e);
            ToDolist::new()
        }
    };

    // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
    println!("‚ú® ToDo –º–µ–Ω–µ–¥–∂–µ—Ä v1.0");
    println!("üìÖ –°–µ–≥–æ–¥–Ω—è: {}", Local::now().format("%Y-%m-%d"));

    // –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≥—Ä–∞–º–º—ã
    loop {
        // –í—ã–≤–æ–¥ –º–µ–Ω—é –∫–æ–º–∞–Ω–¥
        println!("\nüìå –ö–æ–º–∞–Ω–¥—ã:");
        println!(" –¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É");
        println!(" –¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç> –¥–æ <–ì–ì–ì–ì-–ú–ú-–î–î> - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å–æ —Å—Ä–æ–∫–æ–º");
        println!(" —Å–ø–∏—Å–æ–∫ - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏");
        println!(" –≤—ã–ø–æ–ª–Ω–∏—Ç—å <ID> - –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é");
        println!(" —É–¥–∞–ª–∏—Ç—å <ID> - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É");
        println!(" –≤—ã—Ö–æ–¥ - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã");
        print!("‚û• "); // –°–∏–º–≤–æ–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
        io::Write::flush(&mut io::stdout()).unwrap(); // –°–±—Ä–æ—Å –±—É—Ñ–µ—Ä–∞ –≤—ã–≤–æ–¥–∞

        // –ß—Ç–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞
        let mut input = String::new();
        io::stdin().read_line(&mut input).unwrap();
        let input = input.trim();

        // –†–∞–∑–±–∏–≤–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–∞–Ω–¥—ã
        let parts: Vec<&str> = input.splitn(3, ' ').collect();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        match parts[0] {
            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Å –¥–∞—Ç–æ–π –∏–ª–∏ –±–µ–∑)
            "–¥–æ–±–∞–≤–∏—Ç—å" if parts.len() >= 2 => {
                if let Some((_cmd, rest)) = input.split_once(' ') {
                    if let Some((text, date)) = rest.split_once(" –¥–æ ") {
                        // –§–æ—Ä–º–∞—Ç: "–¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç> –¥–æ <–¥–∞—Ç–∞>"
                        if let Err(e) = todo.add_with_date(text.to_string(), date) {
                            eprintln!("{}", e);
                        } else {
                            save_to_file(&todo.zadaniey).unwrap();
                        }
                    } else {
                        // –§–æ—Ä–º–∞—Ç: "–¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç>"
                        todo.add(rest.to_string());
                        save_to_file(&todo.zadaniey).unwrap();
                    }
                }
            }

            // –í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á
            "—Å–ø–∏—Å–æ–∫" => todo.list(),

            // –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
            "–≤—ã–ø–æ–ª–Ω–∏—Ç—å" if parts.len() > 1 => {
                if let Ok(id) = parts[1].parse::<usize>() {
                    if let Err(e) = todo.complete(id) {
                        eprintln!("{}", e);
                    } else {
                        save_to_file(&todo.zadaniey).unwrap();
                    }
                } else {
                    eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                }
            }

            // –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ –ø–æ ID
            "—É–¥–∞–ª–∏—Ç—å" if parts.len() > 1 => {
                if let Ok(id) = parts[1].parse::<usize>() {
                    if let Err(e) = todo.remove(id) {
                        eprintln!("{}", e);
                    } else {
                        save_to_file(&todo.zadaniey).unwrap();
                    }
                } else {
                    eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –∑–∞–¥–∞—á–∏. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.");
                }
            }

            // –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            "–≤—ã—Ö–æ–¥" => break,

            // –ü—É—Å—Ç–∞—è –∫–æ–º–∞–Ω–¥–∞ (–ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–∞—Ç–∏–µ Enter)
            "" => continue,

            // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
            _ => {
                if parts[0] == "–¥–æ–±–∞–≤–∏—Ç—å" {
                    eprintln!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¥–æ–±–∞–≤–∏—Ç—å <—Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏> [–¥–æ <–ì–ì–ì–ì-–ú–ú-–î–î>]");
                } else {
                    eprintln!("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: –¥–æ–±–∞–≤–∏—Ç—å, —Å–ø–∏—Å–æ–∫, –≤—ã–ø–æ–ª–Ω–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å, –≤—ã—Ö–æ–¥");
                }
            }
        }
    }
}
